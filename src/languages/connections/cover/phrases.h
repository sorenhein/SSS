/*
   SSS, a bridge single-suit single-dummy solver.

   Copyright (C) 2020-2022 by Soren Hein.

   See LICENSE and README.
*/

#ifndef SSS_PHRASES_H
#define SSS_PHRASES_H

#include "../../VerbalConnection.h"
#include "../../PhraseExpansion.h"

enum PhrasesEnum: unsigned
{
  PLAYER_WEST = 0,
  PLAYER_EAST = 1,
  PLAYER_EITHER = 2,
  PLAYER_EACH = 3,
  PLAYER_NEITHER = 4,
  PLAYER_SUIT = 5,

  LENGTH_VERB_VOID = 10,
  LENGTH_VERB_XTON = 11,
  LENGTH_VERB_EVENLY = 12,
  LENGTH_VERB_ODD_EVENLY = 13,
  LENGTH_VERB_XTON_ATMOST = 14,
  LENGTH_VERB_CARDS = 15,
  LENGTH_VERB_ATMOST = 16,
  LENGTH_VERB_12 = 17,
  LENGTH_VERB_RANGE = 18,
  LENGTH_VERB_SPLIT = 19,

  LENGTH_ORDINAL_EXACT = 20,
  LENGTH_ORDINAL_ATMOST = 21,
  LENGTH_ORDINAL_ADJACENT = 22,
  LENGTH_ORDINAL_RANGE = 23,

  COUNT_EXACT = 30,
  COUNT_ATMOST = 31,
  COUNT_RANGE = 32,

  TOPS_ATMOST = 40,
  TOPS_ATLEAST = 41,
  TOPS_RANGE = 42,
  TOPS_ACTUAL = 43,
  TOPS_RANKS = 44,
  TOPS_LOWER = 45,
  TOPS_BELOW = 46,

  EXCLUDING_NONE = 50,
  EXCLUDING_NEITHER = 51,
  EXCLUDING_NOT = 52,

  BELOW_NORMAL = 60,
  BELOW_COMPLETELY = 61,

  BOTTOMS_NORMAL = 70,

  LIST_HOLDING_EXACT = 80,
  LIST_HOLDING_WITH_LOWS = 81,

  VERBAL_PHRASE_SIZE = 90
};

enum PhrasesGroup: unsigned
{
  GROUP_PHRASES_PLAYER = 0,
  GROUP_PHRASES_LENGTH_VERB = 1,
  GROUP_PHRASES_LENGTH_ORDINAL = 2,
  GROUP_PHRASES_COUNT = 3,
  GROUP_PHRASES_TOPS = 4,
  GROUP_PHRASES_EXCLUDING = 5,
  GROUP_PHRASES_BELOW = 6,
  GROUP_PHRASES_BOTTOMS = 7,
  GROUP_PHRASES_LIST = 8

};


list<VerbalConnection> phrasesConnection =
{
  { PLAYER_WEST, "PLAYER_WEST", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_EAST, "PLAYER_EAST", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_EITHER, "PLAYER_EITHER", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_EACH, "PLAYER_EACH", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_NEITHER, "PLAYER_NEITHER", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_SUIT, "PLAYER_SUIT", GROUP_PHRASES_PLAYER, PHRASE_NONE },

  { LENGTH_VERB_VOID, "LENGTH_VERB_VOID", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_XTON, "LENGTH_VERB_XTON", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_ORDINAL },
  { LENGTH_VERB_EVENLY, "LENGTH_VERB_EVENLY", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_ODD_EVENLY, "LENGTH_VERB_ODD_EVENLY", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_XTON_ATMOST, "LENGTH_VERB_XTON_ATMOST", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_ORDINAL },
  { LENGTH_VERB_CARDS, "LENGTH_VERB_CARDS", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_ATMOST, "LENGTH_VERB_ATMOST", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_12, "LENGTH_VERB_12", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_RANGE, "LENGTH_VERB_RANGE", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_SPLIT, "LENGTH_VERB_SPLIT", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },

  { LENGTH_ORDINAL_EXACT, "LENGTH_ORDINAL_EXACT", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },
  { LENGTH_ORDINAL_ATMOST, "LENGTH_ORDINAL_ATMOST", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },
  { LENGTH_ORDINAL_ADJACENT, "LENGTH_ORDINAL_ADJACENT", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },
  { LENGTH_ORDINAL_RANGE, "LENGTH_ORDINAL_RANGE", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },

  { COUNT_EXACT, "COUNT_EXACT", GROUP_PHRASES_COUNT, PHRASE_NUMERICAL },
  { COUNT_ATMOST, "COUNT_ATMOST", GROUP_PHRASES_COUNT, PHRASE_NUMERICAL },
  { COUNT_RANGE, "COUNT_RANGE", GROUP_PHRASES_COUNT, PHRASE_NUMERICAL },

  { TOPS_ATMOST, "TOPS_ATMOST", GROUP_PHRASES_TOPS, PHRASE_SOME_OF },
  { TOPS_ATLEAST, "TOPS_ATLEAST", GROUP_PHRASES_TOPS, PHRASE_SOME_OF },
  { TOPS_RANGE, "TOPS_RANGE", GROUP_PHRASES_TOPS, PHRASE_RANGE_OF },
  { TOPS_ACTUAL, "TOPS_ACTUAL", GROUP_PHRASES_TOPS, PHRASE_COMPLETION_SET},
  { TOPS_RANKS, "TOPS_RANKS", GROUP_PHRASES_TOPS, PHRASE_RANKS },
  { TOPS_LOWER, "TOPS_LOWER", GROUP_PHRASES_TOPS, PHRASE_TEXT_LOWER },
  { TOPS_BELOW, "TOPS_BELOW", GROUP_PHRASES_TOPS, PHRASE_TEXT_BELOW },

  { EXCLUDING_NONE, "EXCLUDING_NONE", 
    GROUP_PHRASES_EXCLUDING, PHRASE_NONE },
  { EXCLUDING_NEITHER, "EXCLUDING_NEITHER", 
    GROUP_PHRASES_EXCLUDING, PHRASE_NONE },
  { EXCLUDING_NOT, "EXCLUDING_NOT", 
    GROUP_PHRASES_EXCLUDING, PHRASE_NONE },

  { BELOW_NORMAL, "BELOW_NORMAL", 
    GROUP_PHRASES_BELOW, PHRASE_NONE },
  { BELOW_COMPLETELY, "BELOW_COMPLETELY", 
    GROUP_PHRASES_BELOW, PHRASE_NONE },

  { BOTTOMS_NORMAL, "BOTTOMS_NORMAL", 
    GROUP_PHRASES_BOTTOMS, PHRASE_COMPLETION_XES },

  { LIST_HOLDING_EXACT, "LIST_HOLDING_EXACT", 
    GROUP_PHRASES_LIST, PHRASE_COMPLETION_SET },
  { LIST_HOLDING_WITH_LOWS, "LIST_HOLDING_WITH_LOWS", 
    GROUP_PHRASES_LIST, PHRASE_COMPLETION_BOTH }
};

#endif
