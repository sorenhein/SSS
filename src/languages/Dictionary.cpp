/*
   SSS, a bridge single-suit single-dummy solver.

   Copyright (C) 2020-2022 by Soren Hein.

   See LICENSE and README.
*/

#include "Dictionary.h"

#include "VerbalConnection.h"
#include "PhraseExpansion.h"


#include "connections/cover/sentences.h"
#include "connections/cover/phrases.h"

#include "connections/cards/definite.h"
#include "connections/cards/indefinite.h"
#include "connections/cards/short.h"

#include "connections/honors/short.h"

#include "connections/numbers/numerals.h"
#include "connections/numbers/ordinals.h"

#include "connections/words.h"


list<VerbalConnection> sentencesConnection =
{
  { SENTENCE_LENGTH_ONLY, "SENTENCE_LENGTH_ONLY",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_ONETOP_ONLY, "SENTENCE_ONETOP_ONLY",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_TOPS_LENGTH, "SENTENCE_TOPS_LENGTH",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_TOPS_LENGTH_WITHOUT, "SENTENCE_TOPS_LENGTH_WITHOUT",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_TOPS_EXCLUDING, "SENTENCE_TOPS_EXCLUDING",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_TOPS_AND_XES, "SENTENCE_TOPS_AND_XES",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_TOPS_AND_LOWER, "SENTENCE_TOPS_AND_LOWER",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_ONLY_BELOW, "SENTENCE_ONLY_BELOW",
    GROUP_SENTENCES, PHRASE_NONE },
  { SENTENCE_LIST, "SENTENCE_LIST",
    GROUP_SENTENCES, PHRASE_NONE }
};


list<VerbalConnection> phrasesConnection =
{
  { PLAYER_WEST, "PLAYER_WEST", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_EAST, "PLAYER_EAST", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_EITHER, "PLAYER_EITHER", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_EACH, "PLAYER_EACH", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_NEITHER, "PLAYER_NEITHER", GROUP_PHRASES_PLAYER, PHRASE_NONE },
  { PLAYER_SUIT, "PLAYER_SUIT", GROUP_PHRASES_PLAYER, PHRASE_NONE },

  { LENGTH_VERB_VOID, "LENGTH_VERB_VOID", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_NOT_VOID, "LENGTH_VERB_NOT_VOID", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_XTON, "LENGTH_VERB_XTON", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_ORDINAL },
  { LENGTH_VERB_EVENLY, "LENGTH_VERB_EVENLY", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_ODD_EVENLY, "LENGTH_VERB_ODD_EVENLY", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_XTON_ATMOST, "LENGTH_VERB_XTON_ATMOST", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_ORDINAL },
  { LENGTH_VERB_CARDS, "LENGTH_VERB_CARDS", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_ATMOST, "LENGTH_VERB_ATMOST", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_12, "LENGTH_VERB_12", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NONE },
  { LENGTH_VERB_RANGE, "LENGTH_VERB_RANGE", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_BETWEEN, "LENGTH_VERB_BETWEEN", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },
  { LENGTH_VERB_SPLIT, "LENGTH_VERB_SPLIT", 
    GROUP_PHRASES_LENGTH_VERB, PHRASE_NUMERICAL },

  { LENGTH_ORDINAL_EXACT, "LENGTH_ORDINAL_EXACT", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },
  { LENGTH_ORDINAL_ATMOST, "LENGTH_ORDINAL_ATMOST", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },
  { LENGTH_ORDINAL_ADJACENT, "LENGTH_ORDINAL_ADJACENT", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },
  { LENGTH_ORDINAL_RANGE, "LENGTH_ORDINAL_RANGE", 
    GROUP_PHRASES_LENGTH_ORDINAL, PHRASE_ORDINAL },

  { COUNT_EXACT, "COUNT_EXACT", GROUP_PHRASES_COUNT, PHRASE_NUMERICAL },
  { COUNT_ATMOST, "COUNT_ATMOST", GROUP_PHRASES_COUNT, PHRASE_NUMERICAL },
  { COUNT_RANGE, "COUNT_RANGE", GROUP_PHRASES_COUNT, PHRASE_NUMERICAL },

  { TOPS_ATMOST, "TOPS_ATMOST", GROUP_PHRASES_TOPS, PHRASE_SOME_OF },
  { TOPS_ATLEAST, "TOPS_ATLEAST", GROUP_PHRASES_TOPS, PHRASE_SOME_OF },
  { TOPS_ADJACENT, "TOPS_ADJACENT", GROUP_PHRASES_TOPS, PHRASE_ADJACENT },
  { TOPS_RANGE, "TOPS_RANGE", GROUP_PHRASES_TOPS, PHRASE_RANGE_OF },
  { TOPS_ACTUAL, "TOPS_ACTUAL", GROUP_PHRASES_TOPS, PHRASE_COMPLETION_SET},
  { TOPS_SOME_ACTUAL, "TOPS_SOME_ACTUAL", GROUP_PHRASES_TOPS, 
    PHRASE_SOME_RANK_SET},
  { TOPS_FULL_ACTUAL, "TOPS_FULL_ACTUAL", GROUP_PHRASES_TOPS, 
    PHRASE_FULL_RANK_SET},
  { TOPS_RANKS, "TOPS_RANKS", GROUP_PHRASES_TOPS, PHRASE_RANKS },
  { TOPS_LOWER, "TOPS_LOWER", GROUP_PHRASES_TOPS, PHRASE_TEXT_LOWER },
  { TOPS_BELOW, "TOPS_BELOW", GROUP_PHRASES_TOPS, PHRASE_TEXT_BELOW },

  { EXCLUDING_NONE, "EXCLUDING_NONE", 
    GROUP_PHRASES_EXCLUDING, PHRASE_NONE },
  { EXCLUDING_NEITHER, "EXCLUDING_NEITHER", 
    GROUP_PHRASES_EXCLUDING, PHRASE_NONE },
  { EXCLUDING_NOT, "EXCLUDING_NOT", 
    GROUP_PHRASES_EXCLUDING, PHRASE_NONE },

  { BELOW_NORMAL, "BELOW_NORMAL", 
    GROUP_PHRASES_BELOW, PHRASE_NONE },
  { BELOW_COMPLETELY, "BELOW_COMPLETELY", 
    GROUP_PHRASES_BELOW, PHRASE_NONE },

  { BOTTOMS_NORMAL, "BOTTOMS_NORMAL", 
    GROUP_PHRASES_BOTTOMS, PHRASE_COMPLETION_XES },

  { LIST_HOLDING_EXACT, "LIST_HOLDING_EXACT", 
    GROUP_PHRASES_LIST, PHRASE_COMPLETION_SET },
  { LIST_HOLDING_WITH_LOWS, "LIST_HOLDING_WITH_LOWS", 
    GROUP_PHRASES_LIST, PHRASE_COMPLETION_BOTH }
};


list<VerbalConnection> wordsConnection =
{
  { WORDS_CARD, "CARD", GROUP_CARDS, PHRASE_NONE },
  { WORDS_CARDS, "CARDS", GROUP_CARDS, PHRASE_NONE },

  { WORDS_HONOR, "HONOR", GROUP_HONORS, PHRASE_NONE },
  { WORDS_HONORS, "HONORS", GROUP_HONORS, PHRASE_NONE },

  { WORDS_SMALL, "SMALL", GROUP_SMALL, PHRASE_NONE },

  { WORDS_CONJUNCTION, "CONJUNCTION_OR", GROUP_CONJUNCTIONS, PHRASE_NONE },

  { WORDS_THEY_HOLD, "THEY_HOLD", GROUP_THEY_HOLD, PHRASE_NONE },
};



void Dictionary::read(const string& language)
{
  coverSentences.init(sentencesConnection);
  coverSentences.read(language, "cover/sentences.txt");

  coverPhrases.init(phrasesConnection);
  coverPhrases.read(language, "cover/phrases.txt");

  cardsDefinite.init(definiteConnection);
  cardsDefinite.read(language, "cards/definite.txt");

  cardsIndefinite.init(indefiniteConnection);
  cardsIndefinite.read(language, "cards/indefinite.txt");

  cardsShort.init(cardsShortConnection);
  cardsShort.read(language, "cards/short.txt");

  honorsShort.init(honorsShortConnection);
  honorsShort.read(language, "honors/short.txt");

  numerals.init(numeralsConnection);
  numerals.read(language, "numbers/numerals.txt");

  ordinals.init(ordinalsConnection);
  ordinals.read(language, "numbers/ordinals.txt");

  words.init(wordsConnection);
  words.read(language, "words.txt");
}
