struct SideInfo (ranks + len), len autom 0 on alloc.
Don't keep the reduced ranks in RankEntry (so it's just a scalar).
Instead have global "maps" full->reduced and the other way.
StackInfo uses 1, DistInfo uses 2
Has a method add(rankReduced, count, factor)
DistInfo has method complete (east), doesn't need that much init
When DistInfo west gets set, it has been add() before and is just
  copied over
No longer make oppsRankFull
Reduce size of arrays
Stack and Dist can share some output through SideInfo?
Is there a way to use a vector rather than a list after all?
Check with an old holding AKT / xxx or so.
Make histogram of distribution counts in order to choose chunk size.

StackInfo
* reset() automatically
* update(StackInfo&, r, factor)
* str()

DistInfo
* fill(ranks(), len(), cases(), r, factor)
* complete(len, vector<RankEntry>&)
* str(), just uses generic card names
* str(names)

* Distribution: A single card is output as its name, H only applies to
  multi-card ranks
* Distribution code is a mess.  Some may go in Ranks, too
* Distribution::limit, using a struct that Control returns
  - We will fail for now on some HCP values

* CombEntry -> Combination?
* Add rank = 0 for void, shift the others up
* In Combination, generate all tricks
  - First naively
  - Then properly
  - Count the difference
  - side, card1..4
  - End up with new comb, new dist bit vector
  - Also, some dist's are impossible because E or W known to be void
  - And some because of HCP or other limitations
  - Set up the tree
  - Have a dist vector that corresponds to next-level dists
  - Know which ones are possible
  - Know which cards correspond to next-level cards (and ranks)



