2022-01-01
----------
New outline of CombTest -- get to work, find sources of errors.

1. Ranks skips interesting plays
2. There is minimal, mixed and non-minimal.
   Mixed should include itself in the comparison
3. Ranks: If NS" and N"S, also N'S' and nothing else, etc.
   Check method in Ranks based on the list of lowest strategies winners.
4. Think about down-shifting, e.g. AQ/K missing HH.  If A then Q,
   is the K relevant or is it, too, down-shifted to an x?

WARN-NONMIN      357
ERROR          51399

MINIMUM MATCH 114929
MISMATCH       10988

2. Declarer might get a minAbsNumber() and maxAbsNumber(), then
   setPlaysSide:
   ...
   if // (control.runRankComparisons())
   {
     if (leader.maxAbsNumber() < partner.minAbsNumber())
       return;
   }

   Similarly for 6/502 perhaps, leading the 9 and never the J
   from KQ/J9.  So actually in the above, only the lowest of
   such cards.



2021-12-28
----------
Major next blocks:
5. Continue partitioning of ace-high
   - Non-canonical (not "greater") -> the canonical version
   - Canonical may be completely non-minimal, so probably only
     has 1 minimal?
   - Canonical may be mixed, but then no reason to look at
     minimals?  Might as well solve it since we have to anyway
   - Canonical may be completely minimal


2021-12-27
----------
Case A
------
5/59, AQ/J miss KT
#0 fin, 2N, Q is like 5/61, AQ/T miss KJ (too has #0, #1: 3N, 5N)
  Its #1 is like 5/75
#1 top, 4N, A is like 5/75, AT/J miss KQ (#0 top, 3N)

It's not right to say that 5/75 is THE minimal for 5/59.
5/59 #0 has a minimal in the form of 5/61 #0 and 5/61 #1,
which in turn becomes 5/61 #0 and 5/75 #0.
And directly 5/75 #0.
So effectively there are Strategy-level minimals 5/61 #0 and 5/75 #0.

It would be OK to have 5/61 + 5/75 which must match 5/59.

Case B
------
7/521, AQT/J missing Kxx:
#0 finesse, needs QJ so 7/537 AQ8/J missing KHH is a minimal.
#1 top, needs JT so it is effectively its own minimal.
In checking, we could take 7/521 #0 = 7/537 #0 plus 7/521 #1.
Then 7/521 #1 would be preferable to 7/537#1 to declarer.

This needs itself as a minimal in at least some regard.
It should work to have 7/521 + 7/537 which becames 7/521 again,
as 7/537 #1 is not as good for declarer.

Case C
------
AQ/K, can play as A maybe Q, or as K for sure.
In the former case the K is not needed.
So maybe we do need to keep track of each N *and* S winning card.
And we make a minimal from AQ/K using AQ, it should then be
AK/x and not stay at AQ/K.

5/35 AQ/K miss HH.
#0 K, K and maybe A.  Should become Ax/K. 5/51, K maybe A.
#1 top, A and maybe Q.  Should become(!) AK/x, 5/25, A maybe "K".

It should be OK to have 5/25 + 5/51.

This makes Ranks::minimal different.  Even though K is > Q, it is
shifted down because it is below the "maximum" South winner of \infty.

Maybe each Strategy gets a minimal CombReference, h3 == 0 if not set.
When outputting Strategies, no Prod, but instead h3.


2021-12-26
----------
6/35, AKJ/Q missing HH: One strategy is to cash the ace and then
maybe the king.  Another is to cash the queen.  But this doesn't just
need 2S = Q, as the Q is lower than AK.  So I guess the Winner should
really be strictly the card with the lowest absolute number.

Is this actually a problem with play generation?
6/51: AK9/Q missing JT also has 3S = Q for d=1, whereas the ace
is enough.

6/89 AQJ/K miss HH: 
#0  #1
K   Q
K   A
K   Q
It is reasonable to keep both.
But in Combinations::getMinimals we should have one result per
Strategy and pass these to Ranks::getMinimals.
Then for #0 we'd get Axx/K missing QJ,
and  for #1 we'd get AQx/K missing JT.



2021-12-24
----------
10/43051, QT6 / K9875 (for example), missing AJ
We get 3NS for d=0, 3N for d=3 which corresponds to leading to the Q.
We could also lead to the K and get 3N / 3NS.  Is the play left out
of Ranks?

Cleanup:
Comb counts from Combinations to class/struct?
Declarer: greater?
No Winners at all, once there's only ever 1?
Card: When use number, when absNumber?

5/17, 9/1340, 9/13649: Good test cases.


2021-12-05
----------
Some additional optimizations with numbers, not ranks (xls)
See how many total plays are made now


2021-10-25
----------

CombTest,checkReductions: Should now not need reduceByTricks.
Just use strategies.

2. equalByMethod
   Divide completely by size
   assert size(v1) >= size(v2)?


Open issues 2021-09-26
----------------------
Look at speeding up Slist::equalByMethod.

6. For void starting with 10-13 cards (assuming we solve up to 13
   cards), it's always OK to symmetrize, as we can never get there
   from non-void combinations.  We do this:
   a. If we get above [100] strategies, we start over and only
      look up symmetrized strategies (so 6-8 and 8-6 are done together
      and symmetrized against each other).  Multiply strategy by
      strategy, I think, and don't do a complete cross
   b. In the end, if we are above [16] strategies, we symmetrize
   c. If we know from lookup that something must be symmetric

7. Go from only batch to solving a single distribution from scratch
   a. Basic idea is to make a list of the nodes you'll need
   b. Then make these recursively before you solve this node
   c. A lot of flags are the same, i.e. ranks or not, optimizations
      turned on or not, debugging/checks on/off
   d. Could switch to the minimal one (or one of them) and only
      solve this

A histogram of #strategies shows that we also get large numbers
when South has a single card, e.g. 11/132887, KJ95 / 7 missing AQT864.
Maybe it's OK to limit next strategies to symmetric ones, too,
when South becomes void and there are a lot of next strategies.

Symmetrize 11 / 132902, KJ96 / void: From 132,902 to 166 strategies.
Less than half the square root.


Reduction
---------
* 9: 14762 (KJ97 missing 5 cards) needs 68 distributions

-d
  - Optimize the code for minimal()
  - Also optimize for Strategies == even though it doesn't matter
    - Start at ==, only do upper triangle of matrix


Checks
------
* Node optimization (on/off)
* Strategies *= optimization (on/off)

Check speed and identity of results


Ranks stored in tables
----------------------
* Write and read binary files with holdings to run vs. not
* Is it true that a minimal combination does not need non-minimal
  ones to solve?  If not, we would either solve the non-minimal
  ones, or look up the non-minimal one (probably better) and
  map the smaller number of distributions to the current case somehow


Limited Plays considered
------------------------
* Shift something in Plays or Ranks such that the card number
  starts from 1, not 0, so is distinguishable in Nodes from void
  - I think this involves switching to fullFlag in Play.h, and then
  - samePartial will make different comparisons, but
  - then void == 0 and lowest == 1, otherwise we get aliasing

* Divide Ranks optimizations into those that always make sense, and
  those that only make sense when we don't care about winners.
* Can maybe parametrize Player by full/rank-only loop.  Only needed
  for North and South.
* Can maybe parametrize the Ranks optimizations in the same way.

Make a version of Ranks::setPlays with fewer optimizations:
- Don't have to save partner's cards of equal rank
- When equal rank, all depth combinations

Play eliminations, based on KJ975 missing AQT8xx, so
whenever partner is void:

* In fourth hand where LHO is void, always win cheaply or play lowest
  if you can't win
* In second hand when RHO will show up as void, ditto

Also when we have AQT8 / 64 missing KJ9753, we know that 64 are lower
and shorter than all North cards, so their ranks can't matter.
- Can simplify manually: AQT8 / 64 missing KJ9753.  We can never
  take a rank trick < 8. |S| <= |N|.  Max S <= Max N.  But this only
  gets some of the tough ones.

* Actual optimizations that are probably missing today
- With AQ / - missing KJ, on Ace never drop King (partner will show
  out and the lead was the top card)
- With KJ / - missing AQ, on K never play Q (partner HAS shown out,
  so always win trick)
- Maybe in 4th hand when NS are down to <= 1 card after this trick,
  KJ with AQxx outstanding for example (6/548).


Winning NS plays in semantic form
---------------------------------
* Winning plays/strategies such as "cash ace"
  - Sometimes NS have several ways to reach its optimum; keep them all
* Noting the inequalities on EW plays that are needed to stabilize
  an NS strategy


Applying constraints to defensive holdings
------------------------------------------
* Distribution::limit, using a struct that Control returns
  - We will fail for now on some HCP values


Bug / behavior?
---------------
Why doesn't it work in Combination to make complete copies of
everything?  It must be some stray pointers, but where?

Mixed strategies
----------------
In the end we may not have to do so much LP.  EW must find play for
each distribution that work against all NS strategies.  EW get into
trouble when they need to vary their play depending on what NS do.
So we keep track of all plays that work in various situations, and we
take the intersection which is often not empty.

I'm hoping this will also give rise to the mandatory falsecards that
protect not this holding, but some other holding.

Perhaps represent all the NS strategies as some kind of tree with the
branching points that they will actually make use of.

In the end there will be the combinations with mixed potential.  But
I think we can do all the above independent of external constraints.
So we can actually tell in the abstract which combinations have the
potential for mixed strategies, even without knowing the constraints?!


TODO
----
Not all features of Control.cpp are implemented yet

No / limited endl

In Card, can we think of a way to avoid depth?  Probably not, 
as it is useful for the output.  Maybe avoid number then? Or name?
