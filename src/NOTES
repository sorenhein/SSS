"Trivial result"
- Also get a Prod?
- Also rank-reduce?

10 / 17867, AJ6 / T98 missing HH75
Reduces to (on this calculation, may be wrong)
Axx / JT9 missing HH87
So
1. The J goes away (no North rank 4 needed)
2. It doesn't just to to 6
3. The 75 are also merged



Each strategy in a strategies has a winners which may have multiple
options for declarer.  I think we want to know that an entire 
holding can be treated as an entire other holding.  So that would
argue for using the overall winners of the holding.

For each such overall winner:
- Figure out the minimal holding when setting all non-winners as
  low as possible.  Assume it's not the same as the current one --
  otherwise stop.
- From the current holding, group the distributions by ignoring
  lower cards than the winner.
- Ignore strategy's where a group does not have the same #tricks.
  Declarer is paying attention to cards that he shouldn't.
- Make a synthetic, reduced strategies of what we expect (fewer,
  collapsed distributions + probably fewer strategies)
- Compare against the minimal holding above by == on tricks only


Then we could have a script to compare outputs
- All 2^n versions
- Line counts
- Times elapsed
- Actual strategies
- If with/without rank, compare appropriately by other script

-d
  - Optimize the code for minimal()
  - Also optimize for Strategies == even though it doesn't matter
    - Start at ==, only do upper triangle of matrix


Checks
------
* Node optimization (on/off)
* Strategies *= optimization (on/off)

Check speed and identity of results


Ranks stored in tables
----------------------
* Write and read binary files with holdings to run vs. not
* Is it true that a minimal combination does not need non-minimal
  ones to solve?  If not, we would either solve the non-minimal
  ones, or look up the non-minimal one (probably better) and
  map the smaller number of distributions to the current case somehow


Overall rank of a Combination
-----------------------------
* Some best winners have choices ("top 2 of 3")
  - Leave all cards that may win at declarer's choice, even though
    that combination could simplify to several others
* All unused cards can be set to x in order to get the base case
* Could validate by limiting strategies to those that don't
  distinguish by x.  But how to detect?  Maybe once we know the
  plays that go with each strategy


Limited Plays considered
------------------------
* Shift something in Plays or Ranks such that the card number
  starts from 1, not 0, so is distinguishable in Nodes from void
  - I think this involves switching to fullFlag in Play.h, and then
  - samePartial will make different comparisons, but
  - then void == 0 and lowest == 1, otherwise we get aliasing

* Divide Ranks optimizations into those that always make sense, and
  those that only make sense when we don't care about winners.
* Can maybe parametrize Player by full/rank-only loop.  Only needed
  for North and South.
* Can maybe parametrize the Ranks optimizations in the same way.

Make a version of Ranks::setPlays with fewer optimizations:
- Don't have to save partner's cards of equal rank
- When equal rank, all depth combinations

Play eliminations, based on KJ975 missing AQT8xx, so
whenever partner is void:

* In fourth hand where LHO is void, always win cheaply or play lowest
  if you can't win
* In second hand when RHO will show up as void, ditto

Also when we have AQT8 / 64 missing KJ9753, we know that 64 are lower
and shorter than all North cards, so their ranks can't matter.
- Can simplify manually: AQT8 / 64 missing KJ9753.  We can never
  take a rank trick < 8. |S| <= |N|.  Max S <= Max N.  But this only
  gets some of the tough ones.

* Actual optimizations that are probably missing today
- With AQ / - missing KJ, on Ace never drop King (partner will show
  out and the lead was the top card)
- With KJ / - missing AQ, on K never play Q (partner HAS shown out,
  so always win trick)
- Maybe in 4th hand when NS are down to <= 1 card after this trick,
  KJ with AQxx outstanding for example (6/548).


Rank issues due to limited Plays considered
-------------------------------------------
*  8 /  1585, AQ8 / JT7 missing K9.  See spreadsheet.
*  9 /  4757, AQ8 / JT7.  See spreadsheet.
* 11 / 18752, AK8 / T765.  The result is 2S" (the 5) -- not needed.


Only symmetric strategies with complex voids?
---------------------------------------------
* 9: 14762 (KJ97 missing 5 cards) needs 68 distributions


Winning NS plays in semantic form
---------------------------------
* Winning plays/strategies such as "cash ace"
  - Sometimes NS have several ways to reach its optimum; keep them all
* Noting the inequalities on EW plays that are needed to stabilize
  an NS strategy


Applying constraints to defensive holdings
------------------------------------------
* Distribution::limit, using a struct that Control returns
  - We will fail for now on some HCP values


Bug / behavior?
---------------
Why doesn't it work in Combination to make complete copies of
everything?  It must be some stray pointers, but where?


TODO
----
Not all features of Control.cpp are implemented yet
