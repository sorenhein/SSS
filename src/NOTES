In Plays, or maybe in Combination

- For each RHO node
  - Use combPtr to get strategies, rotating if needed
  - Figure out the distribution numbers from distPtr
  - Cross them onto the pardPtr node
- For each pard node
  - += them onto the LHO node
- For each LHO node
  - *= them onto lead node
- For each lead node
  - += them togethero

Becomes more complicated when we have to keep track of:

- Winning ranks for NS
- Winning plays/strategies such as "cash ace"
  - Sometimes NS have several ways to reach its optimum; keep them all
- Noting the inequalities on EW plays that are needed to stabilize
  an NS strategy


strategies/
  Strategy: For now just a flat vector
  Strategies: For now a collection of Strategy

Plays goes into Combination
- next -> nextPlay
- size -> sizePlay
- resize -> resizePlay
- reset -> resetPlay


------

* Distribution::limit, using a struct that Control returns
  - We will fail for now on some HCP values

* CombEntry -> Combination?
* In Combination, generate all tricks
  - Some dist's are impossible because E or W known to be void
  - And some because of HCP or other limitations
  - Set up the tree
  - Have a dist vector that corresponds to next-level dists
  - Know which ones are possible
  - Know which cards correspond to next-level cards (and ranks)

