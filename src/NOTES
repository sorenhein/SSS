2022-01-04
==========

CombTest errors
---------------

WARN-NONMIN       72
ERROR           2139

MINIMUM MATCH 122981
MISMATCH        2968

Other checks not implemented yet
--------------------------------
* Ranks: If NS" and N"S, also N'S' and nothing else, etc.

* Unranked strategies should all be among ranked ones, and no
  ranked one should go away in terms of its number of tricks


Ideas against errors
--------------------

Premature pruning
.................

In 7/1595 (KT9/Q) for the start Q J there are two strategies, each 
with pluses and minuses for declarer.  #1 (overtaking) needs 2N' 
in order not to lose on tricks anywhere to #0.  Then d = 7 (Kxx / x)
from Q x and Q A comes into play (1, KQ) and beats d = 7 in both
these strategies, so 2N' is no longer needed.  #0 and #1 survive.

In 7/1599 (KT8/Q), #1 loses on tricks to #0 as the 9 is missing,
even though #1 would win d = 6 on ranks. Again d = 7 is eliminated,
so now #1 would be competitive against #0, but it is too late.

The solution seems to be not to consolidate in the partner += step
already, and to wait for the lead += step (and the LHO *= step).
This probably costs memory and time.  I think I will wait with this
until I've done some other optimizations.

Rare products
.............

In 8/1799 (AT/QJ9 missing Kxx) for the start Q and for d = 7 (Kxx/-),
West can duck and then declarer finesses (#0): 2, 2S as superficially,
only the queen is needed.  Later we multiply with Q K (cover) which
has 3/2NS' (QJT).  West will not cover, so it looks as if 2/2S is 
enough.  But 3/2NS' needs a lot more cards than 2/2S.  Concretely
it is in some sense possible to play Q K A for only 2 tricks by
somehow conceding after winning the jack.

3/2NS' in a sense has a profile of trick-taking capability:
3/2NS', 2/2S', 1/4N.  If we multiply this by 2/2S it should yield
2/2S' and not 2/2S.  The condition is more tricks with 2+ more
constraints in between them.  Then it may be possible to weaken
and still improve on the bound.

A trivial strategy stays trivial.

When adapting, we have a new winner (say 1/C) and a subsequent winner
(say 1/D).  We can make 2/(C*D).  We can also make 1/C or 1/D.
If C is more constrained, then we get 2/C and 1/D (as declarer gets
to choose the less constrained one if he gives up a trick).
1/D is only interesting if it is 2+ more relaxed than C.

In general, we can multiply one profile with another to preserve the
sums of tricks.  Then we can pick the most constrained way to get
a number of tricks (defense chooses).  Then we can prune some
declarer's choices of giving up tricks if it doesn't gain 2+ cards.

Again this takes memory and time.

if (tricks > result.tricks)
{
  if (! winner.empty() &&
      winner.getAbsNumber() + 1 < result.winner.getAbsNumber())
  {
  }
}
else if (tricks < result.tricks)
{
  if (! winner.empty() &&
      result.winner.getAbsNumber() + 1 < winner.getAbsNumber())
  {
  }
}

Plays generated in Ranks
------------------------

When ranked
...........
The equivalent of one rank is a singleton card.  Probably always lead
this.

Look for other cases where we were too harsh in permitting plays.

8/1773: Leading the 7 is conceivable(?), but the 8?
Actually with the stiff queen, shouldn't we just lead it?

When unranked
.............
Play eliminations, based on KJ975 missing AQT8xx, so
whenever partner is void:

* In fourth hand where LHO is void, always win cheaply or play lowest
  if you can't win
* In second hand when RHO will show up as void, ditto

Also when we have AQT8 / 64 missing KJ9753, we know that 64 are lower
and shorter than all North cards, so their ranks can't matter.
- Can simplify manually: AQT8 / 64 missing KJ9753.  We can never
  take a rank trick < 8. |S| <= |N|.  Max S <= Max N.  But this only
  gets some of the tough ones.

* Actual optimizations that are probably missing today
- With AQ / - missing KJ, on Ace never drop King (partner will show
  out and the lead was the top card)
- With KJ / - missing AQ, on K never play Q (partner HAS shown out,
  so always win trick)
- Maybe in 4th hand when NS are down to <= 1 card after this trick,
  KJ with AQxx outstanding for example (6/548).


Overall partitioning
--------------------
* Has at least one reference to self -> minimal

* Can characterize solved, ranked combinations as canonical or not,
  and minimal or not (bit vector of bools?)

Symmetrization
--------------

* For void starting with 10-13 cards (assuming we solve up to 13
  cards), it's always OK to symmetrize, as we can never get there
  from non-void combinations.  We do this:
  a. If we get above [100] strategies, we start over and only
     look up symmetrized strategies (so 6-8 and 8-6 are done together
     and symmetrized against each other).  Multiply strategy by
     strategy, I think, and don't do a complete cross
  b. In the end, if we are above [16] strategies, we symmetrize
  c. If we know from lookup that something must be symmetric

* A histogram of #strategies shows that we also get large numbers
  when South has a single card, e.g. 11/132887, KJ95 / 7 missing AQT864.
  Maybe it's OK to limit next strategies to symmetric ones, too,
  when South becomes void and there are a lot of next strategies.

* Symmetrize 11 / 132902, KJ96 / void: From 132,902 to 166 strategies.
  Less than half the square root.


Optimizations
-------------
* If there is a Result per Strategy, equality can be tested first
  in this way.  And then one Result per group (Reduction).
  - One classical lowest result, one that takes history into account
  - In print output, show the result(s)

* Similarly when only < or > is possible.  Take the lowest one and
  its groups.

* Would it be worthwhile to store the minimal numbers in the Strategy
  as well?
  -- Then it would also be in the print output, in the table itself

* Ranked plays in Ranks.cpp, see above (count #plays and see that
  something improves without changing the outcome)

* Maybe instead of the NS business, we just go by absNumber in Card?
  Then that is a simple comparison.  Are there cases where winners are
  not of this form?

* In Card, can we think of a way to avoid depth?  Probably not, 
  as it is useful for the output.  Maybe avoid number then? Or name?

* Optimize the code for Slist::minimal().  Is it even used?

* Look at speeding up Slist::equalByMethod.
  Divide completely by size
  assert size(v1) >= size(v2)?

* Also optimize for Strategies == even though it doesn't matter
  - Start at ==, only do upper triangle of matrix

* Is Declarer::greater used?  Is it completely right?

* No / limited endl


Non-batch one-shots
-------------------

* Go from only batch to solving a single distribution from scratch
  a. Basic idea is to make a list of the nodes you'll need
  b. Then make these recursively before you solve this node
  c. A lot of flags are the same, i.e. ranks or not, optimizations
     turned on or not, debugging/checks on/off
  d. Could switch to the minimal one (or one of them) and only
     solve this

Ranks stored in tables
----------------------
* Write and read binary files with holdings to run vs. not
* Is it true that a minimal combination does not need non-minimal
  ones to solve?  If not, we would either solve the non-minimal
  ones, or look up the non-minimal one (probably better) and
  map the smaller number of distributions to the current case somehow


Mixed strategies
----------------
In the end we may not have to do so much LP.  EW must find play for
each distribution that work against all NS strategies.  EW get into
trouble when they need to vary their play depending on what NS do.
So we keep track of all plays that work in various situations, and we
take the intersection which is often not empty.

I'm hoping this will also give rise to the mandatory falsecards that
protect not this holding, but some other holding.

Perhaps represent all the NS strategies as some kind of tree with the
branching points that they will actually make use of.

In the end there will be the combinations with mixed potential.  But
I think we can do all the above independent of external constraints.
So we can actually tell in the abstract which combinations have the
potential for mixed strategies, even without knowing the constraints?!


Features
--------
* Distribution::limit, using a struct that Control returns
  - We will fail for now on some HCP values

* Not all features of Control.cpp are implemented yet

* Check sometime that these still work
  - Node optimization (on/off)
  - Strategies *= optimization (on/off)


Semantics, verbal descriptions
------------------------------
* Winning plays/strategies such as "cash ace"
  - Sometimes NS have several ways to reach its optimum; keep them all
* Noting the inequalities on EW plays that are needed to stabilize
  an NS strategy

* Verbal description of NS strategy
  - Minterms?


Bugs
----
Why doesn't it work in Combination to make complete copies of
everything?  It must be some stray pointers, but where?

