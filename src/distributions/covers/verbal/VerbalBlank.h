/*
   SSS, a bridge single-suit single-dummy solver.

   Copyright (C) 2020-2022 by Soren Hein.

   See LICENSE and README.
*/

#ifndef SSS_VERBALBLANK_H
#define SSS_VERBALBLANK_H


using namespace std;

#define BLANK_MAX_VERSIONS 15

enum VerbalBlank: unsigned
{
  BLANK_LENGTH_VERB = 0,
  BLANK_LENGTH_ADJ = 1,
  BLANK_ONETOP = 2,
  BLANK_TOPS_PHRASE = 3,
  BLANK_PLAYER_CAP = 4,
  BLANK_LIST_PHRASE = 5,
  BLANK_SIZE = 6
};


enum BlankPlayerCap: unsigned
{
  BLANK_PLAYER_CAP_WEST = 0,
  BLANK_PLAYER_CAP_EAST = 1,
  BLANK_PLAYER_CAP_EITHER = 2,
  BLANK_PLAYER_CAP_EACH = 3,
  BLANK_PLAYER_CAP_NEITHER = 4,
  BLANK_PLAYER_CAP_SUIT = 5
};

enum BlankLengthVerb: unsigned
{
  BLANK_LENGTH_VERB_VOID = 0,
  BLANK_LENGTH_VERB_SINGLE = 1,
  BLANK_LENGTH_VERB_DOUBLE = 2,
  BLANK_LENGTH_VERB_TRIPLE = 3,
  BLANK_LENGTH_VERB_EVENLY = 4,
  BLANK_LENGTH_VERB_ODD_EVENLY = 5,
  BLANK_LENGTH_VERB_SINGLE_ATMOST = 6,
  BLANK_LENGTH_VERB_DOUBLE_ATMOST = 7,
  BLANK_LENGTH_VERB_TRIPLE_ATMOST = 8,
  BLANK_LENGTH_VERB_CARDS_PARAM = 9,
  BLANK_LENGTH_VERB_CARDS_ATMOST_PARAM = 10,
  BLANK_LENGTH_VERB_RANGE_PARAMS = 11,
  BLANK_LENGTH_VERB_SPLIT_PARAMS = 12
};

enum BlankLengthAdj: unsigned
{
  BLANK_LENGTH_ADJ_SINGLE = 0,
  BLANK_LENGTH_ADJ_DOUBLE = 1,
  BLANK_LENGTH_ADJ_TRIPLE = 2,
  BLANK_LENGTH_ADJ_LONG = 3,
  BLANK_LENGTH_ADJ_SINGLE_ATMOST = 4,
  BLANK_LENGTH_ADJ_DOUBLE_ATMOST = 5,
  BLANK_LENGTH_ADJ_TRIPLE_ATMOST = 6,
  BLANK_LENGTH_ADJ_LONG_ATMOST = 7,
  BLANK_LENGTH_ADJ_23 = 8
};

enum BlankOneTop: unsigned
{
  BLANK_ONETOP_HAS_ATMOST = 0,
  BLANK_ONETOP_HAS_ATLEAST = 1,
  BLANK_ONETOP_RANGE_PARAMS = 2
};

enum BlankTopsPhrase: unsigned
{
  BLANK_TOPS_PHRASE_HOLDING = 0
};

enum BlankListPhrase: unsigned
{
  BLANK_LIST_PHRASE_HOLDING = 0
};

#endif
